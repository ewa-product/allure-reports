{"uid":"5eda3d49a957ceaa","name":"test_get_delivery_addresses_pagination[authorize_partner]","fullName":"tests.delivery.test_02_get_delivery_address#test_get_delivery_addresses_pagination","historyId":"e2b13f78fa6726e552979b691f973228","time":{"start":1744368760044,"stop":1744368760968,"duration":924},"description":"Тест: корректная работа пагинации","descriptionHtml":"<p>Тест: корректная работа пагинации</p>\n","status":"skipped","statusMessage":"XFAIL https://ru.yougile.com/team/01c2a92f1328/#IT-628\n\nAssertionError: Поле delivery_price отсутствует в ответе","statusTrace":"api_client = <api_tests.utils.api_client.APIClient object at 0x7f87cd20f290>\nauthorize_func = <function authorize_partner at 0x7f87cd27e480>\n\n    @pytest.mark.xfail(reason = \"https://ru.yougile.com/team/01c2a92f1328/#IT-628\")\n    @pytest.mark.parametrize(\"authorize_func\", [authorize_client, authorize_partner, authorize_admin])\n    def test_get_delivery_addresses_pagination(api_client, authorize_func):\n        \"\"\"Тест: корректная работа пагинации\"\"\"\n        authorize_func(api_client)\n        created_addresses = []  # Список для хранения созданных ID адресов\n    \n        # Создаем 3 адреса и сохраняем их ID\n        for _ in range(3):\n            response = api_client.post(\"/delivery/user_address\", json=create_address_payload())\n            created_addresses.append(response[\"id\"])\n    \n        payload = {\n            \"pagination\": {\n                \"page\": 0,\n                \"size\": 2,\n                \"total\": 3  # Общее количество объектов\n            }\n        }\n    \n        response = api_client.post(\"/delivery/user_address/list\", json=payload)\n    \n        assert api_client.last_response.status_code == 200\n        assert \"addresses\" in response  # Проверяем, что в ответе есть список адресов\n        assert isinstance(response[\"addresses\"], list)\n        assert len(response[\"addresses\"]) <= 2  # Учитываем, что всего адресов может быть 3\n    \n        for address in response[\"addresses\"]:\n>           assert_delivery_address_fields(address)\n\napi_tests/tests/delivery/test_02_get_delivery_address.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_tests/utils/asserts.py:170: in assert_delivery_address_fields\n    assert_presence_of_all_fields(response, expected_fields, optional_fields)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = {'Iin': '990101300123', 'city_id': 23, 'city_name': 'Москва', 'comment': 'Позвоните за 273145 минут до доставки', ...}\nexpected_fields = ['country_id', 'delivery', 'email', 'id', 'name', 'phone', ...]\noptional_fields = ['region_id', 'region_name', 'city_name', 'city_id', 'comment', 'Iin']\n\n    def assert_presence_of_all_fields(response, expected_fields, optional_fields=[]):\n        if isinstance(response, str):  # Если response строка, парсим JSON\n            try:\n                response = json.loads(response)\n            except json.JSONDecodeError:\n                assert False, f\"Ответ не является валидным JSON: {response}\"\n        assert isinstance(response, dict), f\"Ожидался словарь, но получен {type(response)}: {response}\"\n        for field in expected_fields:\n>           assert field in response, f\"Поле {field} отсутствует в ответе\"\nE           AssertionError: Поле delivery_price отсутствует в ответе\n\napi_tests/utils/asserts.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"api_client","time":{"start":1744368750624,"stop":1744368750625,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"api_client::0","time":{"start":1744368761811,"stop":1744368761811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='https://ru.yougile.com/team/01c2a92f1328/#IT-628')"},{"name":"parentSuite","value":"tests.delivery"},{"name":"suite","value":"test_02_get_delivery_address"},{"name":"host","value":"fv-az1311-917"},{"name":"thread","value":"1826-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.delivery.test_02_get_delivery_address"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"authorize_func","value":"<function authorize_partner at 0x7f87cd27e480>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail(reason='https://ru.yougile.com/team/01c2a92f1328/#IT-628')"]},"source":"5eda3d49a957ceaa.json","parameterValues":["<function authorize_partner at 0x7f87cd27e480>"]}